import BM="src\bench\BM.bmasm";
import Globals="bench\globals.bmasm";
import Init="bench\initialisation.bmasm";
import Process="bench\process.bmasm";
import Memory="bench\memory.bmasm";
import ApiHelper="bench\apihelper.bmasm";
import Switcher="bench\switcher.bmasm";
import Scheduler="bench\scheduler.bmasm";

.machine CommanderX16R42
    BM.X16Header();

    .scope bench_main

    ; initialise the system
    sei
    
    ; reset the stack, we never return
    ldx #$ff
    txs
    phx ; add a empty entry for the stack pointer

    jsr initialise

    lda #11
    ldx #<filename
    ldy #>filename
    jsr bitbench_process:load

    lda #12
    ldx #<filename2
    ldy #>filename2
    jsr bitbench_process:load

    cli

    .loop: 
    jmp loop

    .proc initialise

        cld

        lda #1          ; Bench uses bank 1.
        sta RAM_BANK 

        sta IEN         ; vsync interrupt only
        stz CTRL

        jsr bitbench_memory:initialise
        jsr bitbench_scheduler:initialise
        jsr bitbench_process:initialise
        jsr bitbench_switcher:initialise

        jsr override_irq

        rts

    .endproc

    .proc override_irq

        // we need to override the whole handler, 
        // so we use the vector at $fffe instead of $314
        // this is because the routine at $314 isn't the whole interrupt handler.

        stz ROM_BANK

        lda $fffe
        sta bench_general:zp_pointer
        lda $ffff
        sta bench_general:zp_pointer + 1

        ; replace default handler with a jump to our own.
        lda #$4c        ; jmp
        sta (bench_general:zp_pointer)
        ldy #1
        lda #<irq
        sta (bench_general:zp_pointer), y
        iny
        lda #>irq
        sta (bench_general:zp_pointer), y

        rts

    .endproc

    .proc irq

        ; add extra data to the stack, prior to storage
        pha
        phy
        phx

        ; check if its a brk
        tsx
        lda $106, x     ; +3 for stack pointer, plus three above 
        and #$10
        bne brk_hit

        ; clear interrupt flag
        lda #01
        sta ISR

        lda RAM_BANK
        pha
        lda ROM_BANK
        pha

        ; call kernel routies
        stz ROM_BANK
        jsr mouse_scan
        jsr joystick_scan
        jsr SCNKEY
        ; clock_update isn't exposed so cannot call 

        ; check if we need to switch process
        lda #1          ; Bench uses bank 1.
        sta RAM_BANK 

        jsr bitbench_scheduler:reset    ; reset scheduler for the frame
        jsr bitbench_scheduler:get_next_process ; returns 0 if nothing to do

        beq nothing_to_do               

        jsr bitbench_switcher:activate_process_interrupt 

        ; stack here will always have these values even if switched
        pla 
        sta ROM_BANK
        pla
        sta RAM_BANK

        plx
        ply
        pla

        rti

        ; todo: handle brk
    .brk_hit:
        stp
        jmp brk_hit    

    .nothing_to_do:
        jsr bitbench_switcher:store_process
        ; set the return value to the idle loop sprocs
        ; empty the stack, and push a dummy entry
        ldx #$fe
        txs

        lda #>idle_loop
        pha
        lda #<idle_loop
        pha
        lda #0
        pha     ; cpu flags

        rti        
    .endproc

    .proc idle_loop

    .loop:
        wai
        jmp loop

    .endproc

    .filename:
    BM.Bytes("TESTAPP.BIN");
    .filename2:
    BM.Bytes("TESTAPP2.BIN");

    .segment bench_general
    .scope bench_main
    .padvar byte irq_hander_l
    .padvar byte irq_hander_h
    .endscope
    .endsegment

    .segment testapp $a000 $2000 TESTAPP.BIN
    ApiHelper.Header("TEST", "entry", "exit", 2, 1);

    .entry:    
        nop
        stz $02
    .loop:
        wai
        inc $02
        jmp -loop

    .exit:
        rts

    .endsegment

    .segment testapp2 $a000 $2000 TESTAPP2.BIN
    ApiHelper.Header("TEST2", "entry2", "exit2", 2, 1);

    .byte 1, 2, 3, 4, 5
    .entry2:
        nop
        stz $03
    .loop2:
        wai
        inc $03
        jmp loop2

    .exit2:
        rts

    .endsegment

    ; create procs
    Init.Setup();
