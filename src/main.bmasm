import BM="bench\BM.bmasm";
import Global="bench\globals.bmasm";
import Init="bench\initialisation.bmasm";
import Process="bench\process.bmasm";
import Memory="bench\memory.bmasm";
import ApiHelper="bench\apihelper.bmasm";
import Switcher="bench\switcher.bmasm";
import Scheduler="bench\scheduler.bmasm";
import Window="bench\window.bmasm";


.machine CommanderX16R42
    BM.X16Header();

    bool DebugZOrder = false;

    .scope bench_main

    ; initialise the system
    sei

    ; reset the stack, we never return
    ldx #$ff
    txs
    phx ; add a empty entry for the stack pointer

    jsr initialise

    lda #11
    ldx #<filename
    ldy #>filename
    jsr bench_process:load

    lda #12
    ldx #<filename2
    ldy #>filename2
    jsr bench_process:load

    cli

.loop: 
    jmp loop

    .proc initialise     

        cld

        lda #1          ; Bench uses bank 1.
        sta RAM_BANK 

        sta IEN         ; vsync interrupt only
        stz CTRL

        jsr bench_window:initialise
        jsr bench_memory:initialise
        jsr bench_scheduler:initialise
        jsr bench_process:initialise
        jsr bench_switcher:initialise

        jsr override_irq

        rts

    .endproc

    .proc override_irq

        // we need to override the whole handler, 
        // so we use the vector at $fffe instead of $314
        // this is because the routine at $314 isn't the whole interrupt handler.

        stz ROM_BANK

        lda $fffe
        sta bench_general:zp_pointer
        lda $ffff
        sta bench_general:zp_pointer + 1

        ; replace default handler with a jump to our own.
        lda #$4c        ; jmp
        sta (bench_general:zp_pointer)
        ldy #1
        lda #<irq
        sta (bench_general:zp_pointer), y
        iny
        lda #>irq
        sta (bench_general:zp_pointer), y

        rts

    .endproc

    .proc brk_hit
        ; todo: handle brk
        stp
        jmp brk_hit    
    .endproc

    .proc irq

        ; add extra data to the stack, prior to storage
        pha
        phy
        phx

        lda #$d
        sta DC_BORDER

        ; check if its a brk
        tsx
        lda $106, x     ; +3 for stack pointer, plus three above 
        and #$10
        bne brk_hit

        ; clear interrupt flag
        lda #01
        sta ISR

        lda RAM_BANK
        pha
        lda ROM_BANK
        pha

        ; call kernel routies
        stz ROM_BANK
        jsr mouse_scan
        jsr joystick_scan
        jsr SCNKEY
        ; clock_update isn't exposed so cannot call 

        lda #05
        sta DC_BORDER

        ; fetch and store mouse movement
        lda bench_general:mouse_buttons
        sta bench_general:prev_mouse_buttons
        
        lda bench_general:mouse_x
        sta bench_general:prev_mouse_x
        lda bench_general:mouse_y
        sta bench_general:prev_mouse_y

        ldx #bench_general:mouse_x
        jsr mouse_get
        sta bench_general:mouse_buttons

        ; convert mouse pixel pos to tile pos, div 8
        clc
        lda bench_general:mouse_x
        ror bench_general:mouse_x + 1
        ror 
        clc
        ror bench_general:mouse_x + 1
        ror
        clc
        ror bench_general:mouse_x + 1
        ror
        sta bench_general:mouse_x

        clc
        lda bench_general:mouse_y
        ror bench_general:mouse_y + 1
        ror
        clc
        ror bench_general:mouse_y + 1
        ror
        clc
        ror bench_general:mouse_y + 1
        ror
        sta bench_general:mouse_y

        jsr GETIN
        sta bench_general:keyboard ; todo, if non-zero, send message to active window, like mouse moves

        lda #bench_general:bank_bench
        sta RAM_BANK

        ; handle mouse movement
        Global.Call_HandleMouse();

        if (DebugZOrder)
        {
            stz ADDRx_L
            stz ADDRx_M
            lda #$10
            sta ADDRx_H

            ldx #0
            ldy #$10
        .loop:
            lda bench_window:window_data + bench_window:window_zorder_offset, x
            phx

            tax
            lda display_lookup, x
            sta DATA0
            lda #01
            sta DATA0

            plx
            txa
            clc
            adc #$10
            tax

            dey
            bne -loop

            jmp skip_past_data
        .display_lookup:
            .byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $01, $02, $03, $04, $05, $06
        .skip_past_data: 
        }

        lda #01
        sta DC_BORDER

        ; check if we need to switch process
        
        jsr bench_scheduler:reset    ; reset scheduler for the frame
        jsr bench_scheduler:get_next_process ; returns 0 if nothing to do

        beq nothing_to_do               

        jsr bench_switcher:activate_process_interrupt 

        ; stack here will always have these values even if switched
        pla 
        sta ROM_BANK
        pla
        sta RAM_BANK

        stz DC_BORDER

        plx
        ply
        pla

        rti

    .nothing_to_do:
        jsr bench_switcher:store_process

        lda #$ff
        sta bench_switcher:current_process

        ; set the return value to the idle loop sprocs
        ; empty the stack, and push a dummy entry
        ldx #$fe
        txs

        lda #>idle_loop
        pha
        lda #<idle_loop
        pha
        lda #0
        pha     ; cpu flags

        stz DC_BORDER

        rti        
    .endproc

    .proc idle_loop

    .loop:
        wai
        jmp loop

    .endproc

    .filename:
    BM.Bytes("TESTAPP.BIN");
    .filename2:
    BM.Bytes("TESTAPP2.BIN");

    .segment bench_general
    .scope bench_main
    .padvar byte irq_hander_l
    .padvar byte irq_hander_h
    .endscope
    .endsegment

    .segment testapp $a000 $2000 TESTAPP.BIN testapp
    ApiHelper.Header("TEST", "entry", "exit", "focus", "blur", 1, 1);

    const int width = 0x30-2;
    const int height = 0x10-2; 

    .constvar ushort address = $22

    .entry:    
        sei

        lda #$05
        sta bench_window:window_top
        sta bench_window:window_left
        lda #@(width+2)
        sta bench_window:window_width
        lda #@(height+2)
        sta bench_window:window_height
        lda #<title
        sta bench_window:window_title
        lda #>title
        sta bench_window:window_title + 1

        jmp +skip
    .title:
        BM.IsoPetscii("PROCESS 1");
    .skip:

        lda bench_general:application_processid
        jsr bench_window:create_window
        sta window_id
        ;clc
        ;jsr bench_window:draw_window
        cli

        lda #<display
        sta address
        lda #>display
        sta address + 1

        ldx #>@(width * height * 2)
        ldy #<@(width * height * 2)

        lda #0
    .loop:    
        sta (address)
        inc address
        bne no_overflow
        inc address + 1

    .no_overflow:

        dex
        bne -loop
        dey
        bne -loop

        lda #<display
        sta address
        lda #>display
        sta address + 1

        stz curr_x
        stz curr_y
        lda #1
        sta xpos_chg
        sta ypos_chg

    .loop:
        lda #4
        sta DC_BORDER

        ;clear current
        lda #$20
        sta (address)

    ; x
        clc
        lda curr_x
        adc xpos_chg
        sta curr_x

    ; y 
        clc
        lda curr_y
        adc ypos_chg
        sta curr_y

    ; apply changes
    ; x change
        lda xpos_chg
        cmp #1
        bne +subtract
    
        clc
        lda address
        adc #2
        sta address
        lda address + 1
        adc # 0
        sta address + 1
        jmp +done

    .subtract:

        sec
        lda address
        sbc #2
        sta address
        lda address + 1
        sbc # 0
        sta address + 1
        jmp +done

    .done:

    ; y change
        lda ypos_chg
        cmp #1
        bne +subtract
    
        clc
        lda address
        adc #@(width * 2)
        sta address
        lda address + 1
        adc # 0
        sta address + 1
        jmp +done

    .subtract:

        sec
        lda address
        sbc #@(width * 2)
        sta address
        lda address + 1
        sbc # 0
        sta address + 1
        jmp +done

    .done:

    ; plot
        ldy #1
        lda #$51
        sta (address)
        lda #$26
        sta (address), y


    ; x bounds
        lda curr_x
        beq +reverse
        cmp #@(width-1)
        bne +no_change

    .reverse:
        lda xpos_chg
        eor #$ff
        inc
        sta xpos_chg

    .no_change:

    ; y bounds
        lda curr_y
        beq +reverse
        cmp #@(height-1)
        bne +no_change

    .reverse:
        lda ypos_chg
        eor #$ff
        inc
        sta ypos_chg

    .no_change:
    
        sei

        ; Update the whole window buffer
        lda window_id
        sta bench_window:content_window_id
        
        stz bench_window:content_top
        stz bench_window:content_left
        lda #<@(width * height * 2)
        sta bench_window:content_source_length
        lda #>@(width * height * 2)
        sta bench_window:content_source_length + 1
        lda #<display
        sta bench_window:content_source_address
        lda #>display
        sta bench_window:content_source_address + 1

        jsr bench_window:update_window_contents

        ; Update the display
        lda window_id
        jsr bench_window:update_display_window

        cli

        lda #2
        sta DC_BORDER

        jsr bench_process:process_sleep
        jmp -loop

    .exit:
        rts

    .focus:
        ; these events happen within the interrupt handler
        ; lda window_id
        ; sta bench_window:content_window_id
        ; lda #1
        ; sta bench_window:content_top
        ; lda #1
        ; sta bench_window:content_left
        ; lda #10
        ; sta bench_window:content_source_length
        ; stz bench_window:content_source_length + 1
        ; lda #<focus_source_data
        ; sta bench_window:content_source_address
        ; lda #>focus_source_data
        ; sta bench_window:content_source_address + 1

        ; lda window_id
        ; jsr bench_window:update_window_contents

        rts

    .blur:
        ; these events happen within the interrupt handler
        ; lda window_id
        ; sta bench_window:content_window_id
        ; lda #1
        ; sta bench_window:content_top
        ; lda #1
        ; sta bench_window:content_left
        ; lda #10
        ; sta bench_window:content_source_length
        ; stz bench_window:content_source_length + 1
        ; lda #<blur_source_data
        ; sta bench_window:content_source_address
        ; lda #>blur_source_data
        ; sta bench_window:content_source_address + 1

        ; jsr bench_window:update_window_contents

        rts

    .data:
        .padvar byte curr_x
        .padvar byte curr_y
        .padvar byte window_id
        .padvar byte xpos_chg
        .padvar byte ypos_chg
    .blur_source_data:
        .byte 0x02, 0x02
        .byte 0x0c, 0x02
        .byte 0x15, 0x02
        .byte 0x12, 0x02
        .byte 0x20, 0x02
    .focus_source_data:
        .byte 0x06, 0x05
        .byte 0x0f, 0x05
        .byte 0x03, 0x05
        .byte 0x15, 0x05
        .byte 0x13, 0x05
    .align $100
        .padvar byte[@(width * height * 2)] display

    .endsegment

    .segment testapp2 $a000 $2000 TESTAPP2.BIN testapp2
    ApiHelper.Header("TEST2", "entry", "exit", "focus", "blur", 1, 1);

    const int width2 = 0x3c;
    const int height2 = 0x20; 

    .byte 1, 2, 3, 4, 5
    .entry:
        sei
        lda #$10
        sta bench_window:window_top
        sta bench_window:window_left
        lda #@(width2)
        sta bench_window:window_width
        lda #@(height2)
        sta bench_window:window_height
        lda #<title2
        sta bench_window:window_title
        lda #>title2
        sta bench_window:window_title + 1

        jmp +skip
    .title2:
        BM.IsoPetscii("PROCESS 2");
    .skip:

        lda bench_general:application_processid
        jsr bench_window:create_window
        sta window_id

        stz counter
        lda #1
        sta colour

        cli
    .loop:


        lda #2
        sta DC_BORDER

        jsr bench_process:process_sleep

        lda #7
        sta DC_BORDER

        inc counter

        sei
        lda window_id
        sta bench_window:content_window_id
        lda #5
        sta bench_window:content_top
        lda #1
        sta bench_window:content_left
        lda #2 ; number of bytes
        sta bench_window:content_source_length
        stz bench_window:content_source_length + 1
        lda #<counter
        sta bench_window:content_source_address
        lda #>counter
        sta bench_window:content_source_address + 1

        jsr bench_window:update_window_contents

        lda window_id
        jsr bench_window:update_display_window

        cli

        jmp -loop

    .exit:
        rts

    .focus:
        ;these events happen within the interrupt handler
        lda window_id
        sta bench_window:content_window_id
        lda #5
        sta bench_window:content_top
        lda #5
        sta bench_window:content_left
        lda #10
        sta bench_window:content_source_length
        stz bench_window:content_source_length + 1
        lda #<focus_source_data
        sta bench_window:content_source_address
        lda #>focus_source_data
        sta bench_window:content_source_address + 1

        jsr bench_window:update_window_contents

        rts

    .blur:
        ;these events happen within the interrupt handler
        lda window_id
        sta bench_window:content_window_id
        lda #5
        sta bench_window:content_top
        lda #5
        sta bench_window:content_left
        lda #10
        sta bench_window:content_source_length
        stz bench_window:content_source_length + 1
        lda #<blur_source_data
        sta bench_window:content_source_address
        lda #>blur_source_data
        sta bench_window:content_source_address + 1

        jsr bench_window:update_window_contents

        rts

    .data:
        .padvar byte window_id
        .padvar byte counter
        .padvar byte colour
    .blur_source_data:
        .byte 0x02, 0x02
        .byte 0x0c, 0x02
        .byte 0x15, 0x02
        .byte 0x12, 0x02
        .byte 0x20, 0x02
    .focus_source_data:
        .byte 0x06, 0x05
        .byte 0x0f, 0x05
        .byte 0x03, 0x05
        .byte 0x15, 0x05
        .byte 0x13, 0x05

    .endsegment

    ; create procs
    Init.Setup();
