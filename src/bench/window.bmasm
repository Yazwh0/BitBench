library BitBench.Window.Manager;

import Init="initialisation.bmasm";
import Global="globals.bmasm";

private static byte BorderColour = 0xa9;
private static byte InactiveBorderColour = 0xa7;
private static byte WindowText = 0x01;
private static byte InactiveWindowText = 0x0c;

private static void Setup()
{
    ; VRAM Map
    ; Tilemap starts at $00000
    ; Tilemap           $00000 - $03c00
    ; Application vram  $03c00 - $13000
    ; todo: move sprites to a more suitable location

    .segment bench_window, scope=bench_window

    ; todo, change the order of these to match the other ordering    
    .constvar byte window_width = $02
    .constvar byte window_height = $03
    .constvar byte window_left = $04
    .constvar byte window_top = $05
    .constvar ushort window_title = $06
    
    .constvar byte window_bordercolour = $02
    .constvar byte window_textcolour = $03

    ; for updating the display
    .constvar byte content_window_id = $02
    .constvar byte content_left = $03
    .constvar byte content_top = $04
    .constvar ushort content_source_address = $05
    .constvar ushort content_source_length = $07

    .const SCREEN_MODE = $ff5f
    .const MOUSE_CONFIG = $ff68
    
    .const border_colour = @(BorderColour)
    .const inactive_border_colour = @(InactiveBorderColour)
    .const window_text = @(WindowText)
    .const inactive_window_text = @(InactiveWindowText)

    .const background_colour = $c3
    .const background_tile = $66

    .const window_width_offset = 0
    .const window_height_offset = 1
    .const window_top_offset = 2
    .const window_left_offset = 3
    .const window_title_offset = 4
    .const window_zorder_offset = 6
    .const window_processid_offset = 7
    .const window_vram_addr_offset = 8
    .const window_vram_len_offset = 11
    .const window_title_bank_offset = 13
    .const window_padding2_offset = 14
    .const window_padding3_offset = 15

    .const max_windows = 16

    .window_data:
    for(var i = 0; i < 16; i++)
    {
        .padvar byte width_@(i)
        .padvar byte height_@(i)
        .padvar byte top_@(i)
        .padvar byte left_@(i)
        .padvar ushort title_@(i)
        .padvar byte zorder_@(i)
        .padvar byte process_id_@(i)
        .padvar ushort vram_addr_@(i)
        .padvar byte vram_addrh_@(i)
        .padvar ushort vram_addr_@(i)
        .padvar byte title_bank_@(i)
        .padvar byte padding2_@(i)
        .padvar byte padding3_@(i)
    }
    
    .padvar byte vram_addr_l
    .padvar byte vram_addr_m
    .padvar byte vram_addr_h
    .padvar byte current_window

    .endsegment

    .segment bench_zp, scope=bench_window
    .padvar byte drawing_window
    .endsegment

    Global.AddMouseHandler("bench_window:mouse_move");
}

private static void Proc()
{
    .scope bench_window

    .proc initialise

        .const screensize = 960
        ; setup display

        ; disable layer 0
        stz CTRL
        lda DC_VIDEO
        and #0b11101111
        sta DC_VIDEO

        lda #$68     ; 128x64 1bpp 256C
        sta L1_CONFIG

        stz L1_MAPBASE  ; set mapbase to 0

        ; clear vram from start of layer 1
        stz ADDRx_L
        stz ADDRx_M
        lda #$10
        sta ADDRx_H

        lda #2
        sta CTRL

        lda #$9e
        sta DC_HSTOP

        stz CTRL
    
        lda #$ff
        sta current_window

        ; write to data0 128*60*2/16=960 times.
        ldx #<screensize
        ldy #(>screensize)+1
    .loop:
        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0

        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0

        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0
        
        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0

        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0

        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0

        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0
        
        lda #background_tile
        sta DATA0
        lda #background_colour
        sta DATA0

        dex
        bne -loop
        dey
        beq done
        ldx #$ff
        jmp -loop

    .done:
        ; enable the mouse
        sec
        jsr SCREEN_MODE
        lda #1              ; mouse visible
        jsr MOUSE_CONFIG

        ; clear memory, only need to clear process id
        ldx #0
        ldy #max_windows
    .loop:
        stz window_data + window_processid_offset, x
        
        clc
        txa
        adc #16
        tax

        dey
        bne -loop

        ; set base of application vram
        stz vram_addr_l
        lda #$3c
        sta vram_addr_m
        lda #$10            ; add stepping here, as it will always be by one.
        sta vram_addr_h 

        ; clear window map bank
        lda RAM_BANK
        pha

        lda #bench_general:bank_windowmap
        sta RAM_BANK

        lda #$a0
        stz bench_general:zp_pointer
        sta bench_general:zp_pointer + 1

        ldx #$20
        ldy #0
        lda #$ff

    .loop:
        sta (bench_general:zp_pointer), y
        dey
        bne -loop
        inc bench_general:zp_pointer + 1
        dex
        bne -loop

        pla
        sta RAM_BANK

        rts

    .endproc

    ; ** can be called by applications **
    ; creates a window and sets it to the lowest Z Order so it is displayed
    ; parameters are passed via the ZP values
    ; byte window_width
    ; byte window_height
    ; byte window_top
    ; byte window_left
    ; ushort window_title, pointer to null terminated string.
    ; also uses these registers
    ; A: process ID
    ; returns
    ; A: window ID
    ; carry set on error, eg too many windows or out of memory
    .proc create_window
        ; loop through the window list looking for a empty slot.
        ; adjust zorder by one as we go

        pha

        ldx RAM_BANK
        stx bench_general:return_rambank

        ldx #bench_general:bank_bench
        stx RAM_BANK

        ldy #0
        ldx #0

    .loop:
        lda window_data + window_processid_offset, x
        beq found_position

        iny
        cpy #max_windows + 1
        beq error_no_space

        clc
        txa
        adc #16
        tax

        lda window_data + window_processid_offset, x
        bne -loop       ; only inc windows with a process id
        inc window_data + window_zorder_offset, x

        jmp -loop

    .error_no_space:
        lda bench_general:return_rambank
        sta RAM_BANK

        pla
        sec        
        rts

    .found_position:
        pla
        phy
        ; y now has the window ID, X the offset
        sta window_data + window_processid_offset, x   

        lda window_width
        sta window_data + window_width_offset, x
        dec
        dec
        sta bench_general:factor1     ; used to muliply later

        lda window_height
        sta window_data + window_height_offset, x
        dec
        dec
        clc
        rol ; * 2 as its tile+colour data
        sta bench_general:factor2

        lda window_top
        sta window_data + window_top_offset, x   

        lda window_left
        sta window_data + window_left_offset, x

        stz window_data + window_zorder_offset, x

        lda window_title
        sta window_data + window_title_offset, x   
        lda window_title + 1
        sta window_data + window_title_offset + 1, x  

        lda bench_general:return_rambank
        sta window_data + window_title_bank_offset, x

        phx

    .loop:
        cpy #max_windows + 1
        beq +done
        
        iny
        clc
        txa
        adc #16
        tax

        lda window_data + window_processid_offset, x
        beq -loop       ; only inc windows with a process id
        inc window_data + window_zorder_offset, x

        jmp -loop

    .done:
        ; allocate VRAM
        ; multiply height-2 * width-2 * 2
        jsr bench_general:multiply

        plx

        ; factor1/2 should now have the total size
        ; store length
        lda bench_general:factor1
        sta window_data + window_vram_len_offset, x
        lda bench_general:factor2
        sta window_data + window_vram_len_offset + 1, x

        ; set data port before we overwrite the pointer
        stz CTRL
        lda vram_addr_l
        sta ADDRx_L
        lda vram_addr_m
        sta ADDRx_M
        lda vram_addr_h
        sta ADDRx_H

        ; store vram position and add length
        clc
        lda vram_addr_l
        sta window_data + window_vram_addr_offset, x
        adc bench_general:factor1
        sta vram_addr_l

        lda vram_addr_m
        sta window_data + window_vram_addr_offset + 1, x
        adc bench_general:factor2
        sta vram_addr_m

        lda vram_addr_h
        sta window_data + window_vram_addr_offset + 2, x
        adc #0
        sta vram_addr_h

        ; clear the vram
        lda bench_general:factor1
        ldx bench_general:factor2
        inx

        ; must be a quicker way to do this!
    .loop:
        stz DATA0
        dec
        bne -loop
        dex
        beq +done
        jmp -loop
        
    .done:
        ; write in window map
        lda #bench_general:bank_windowmap
        sta RAM_BANK
 
        ; use top\left parameters as a pointer
        lda window_top

        clc
        rol window_left
        clc
        ror
        ror window_left

        clc
        adc #$a0
        sta window_top
        ; left, top should now point to the location in the window map

        pla             ; get window id
        pha 

        ; loop through and set all entries in the map to the window id. add 128 each line.
        ldx window_height
        ldy window_width
    .loop:
        dey
        sta (window_left), y
        bne -loop

        dex
        beq +done

        pha
        clc
        lda window_left
        adc #$80
        sta window_left
        lda window_top
        adc #0
        sta window_top    
        pla

        ldy window_width
        iny
    
        jmp -loop

    .done:
        ; now blur the previous window and draw.
        lda #bench_general:bank_bench
        sta RAM_BANK

        jsr blur_current_window

        lda #bench_general:bank_bench
        sta RAM_BANK

        ; draw new window
        pla
        pha
        sta current_window

        sec
        jsr draw_window

        lda bench_general:return_rambank
        sta RAM_BANK

        pla
        clc
        rts

    .endproc

    ; ** can be called by applications **
    ; marks a window as closed, doesn't perform any checks
    ; inputs:
    ; A: window ID
    .proc close_window

        ldx RAM_BANK
        stx bench_general:return_rambank

        ldx #bench_general:bank_bench
        stx RAM_BANK

        clc

        rol ; * 16
        rol
        rol
        rol

        tax

        stz window_data + window_processid_offset, x

        lda bench_general:return_rambank
        sta RAM_BANK

        rts

    .endproc

    ; mark the window in A to be the top of the window map
    ; * CHANGES BANK *
    ; inputs:
    ; A: window ID
    .proc map_window_to_top

        .const top = bench_general:zp_pointer+1
        .const left = bench_general:zp_pointer
        .const width = bench_general:zp_pointer2
        .const height = bench_general:zp_pointer2+1
    
        pha
    
        clc
        rol ;* 16
        rol
        rol
        rol

        tax

        lda window_data + window_top_offset, x   
        sta top
        lda window_data + window_left_offset, x
        sta left
        lda window_data + window_width_offset, x
        sta width
        lda window_data + window_height_offset, x
        sta height

        lda #bench_general:bank_windowmap
        sta RAM_BANK
 
        ; use top\left parameters as a pointer
        lda top

        clc
        rol left
        clc
        ror
        ror left

        clc
        adc #$a0
        sta top
        ; left, top should now point to the location in the window map

        pla             ; get window id
        pha 

        ldx height
        ldy width
    .loop:
        dey
        sta (bench_general:zp_pointer), y
        bne -loop

        dex
        beq +done

        pha
        clc
        lda left
        adc #$80
        sta left
        lda top
        adc #0
        sta top
        pla

        ldy width
        iny
    
        jmp -loop

    .done:
        pla

        rts

    .endproc

    ; draw window, will stomp on the current display
    ; assumes bank 1 is active
    ; inputs
    ; A window ID,
    ; Carry - if set its the top window
    .proc draw_window
        pha

        bcc not_top

        lda #border_colour
        sta window_bordercolour
        lda #window_text
        sta window_textcolour

        jmp draw_start
    .not_top:
        lda #inactive_border_colour
        sta window_bordercolour
        lda #inactive_window_text
        sta window_textcolour
        
    .draw_start:

        clc
        pla

        rol ; * 16
        rol
        rol
        rol

        tax

        ; display source
        lda #01
        sta CTRL
        lda window_data + window_vram_addr_offset, x
        sta ADDRx_L
        lda window_data + window_vram_addr_offset + 1, x
        sta ADDRx_M
        lda window_data + window_vram_addr_offset + 2, x
        sta ADDRx_H
    
        ; starting position
        stz CTRL
        lda window_data + window_left_offset, x
        clc
        rol
        sta ADDRx_L

        lda window_data + window_top_offset, x
        sta ADDRx_M

        lda #$10
        sta ADDRx_H        

        OutputWindowTopLine();

        ; central lines
        lda window_data + window_height_offset, x
        dec
        dec
        tay
    .line_loop:
        phy

        lda window_data + window_left_offset, x
        clc
        rol
        sta ADDRx_L
        inc ADDRx_M

        OutputWindowLine();

        ply
        dey
        bne -line_loop

        ; bottom line
        lda window_data + window_left_offset, x
        clc
        rol
        sta ADDRx_L
        inc ADDRx_M

        OutputWindowBottomLine();

        rts

    .endproc

    .proc mouse_move

        ; check if click has occured and if so, switch focus

        lda bench_general:mouse_buttons
        and #01 ; left mouse button
        bne mouse_is_down

    .done:
        rts

    .mouse_is_down:

        eor bench_general:prev_mouse_buttons
        and #01
        beq -done

        ; get window id
        lda RAM_BANK
        pha

        lda #bench_general:bank_windowmap
        sta RAM_BANK

        lda bench_general:mouse_x
        clc
        rol
        sta bench_general:zp_pointer

        clc
        lda bench_general:mouse_y
        ror
        ror bench_general:zp_pointer
        adc #$a0
        sta bench_general:zp_pointer+1

        lda (bench_general:zp_pointer)
        bmi +done

        ldx #bench_general:bank_bench
        stx RAM_BANK

        cmp current_window
        beq +done
        
        pha ; store window ID

        ; old window
        jsr blur_current_window


        ; new focus
        pla ; get window ID
        
        ; call focus
        jsr focus_window


        lda #bench_general:bank_bench
        sta RAM_BANK

        lda current_window
        jsr map_window_to_top

    .done:
        pla
        sta RAM_BANK

        rts

    .endproc

    ; blurs the current window
    ; ** CHANGES RAM BANK **
    .proc blur_current_window

        lda current_window
        cmp #$ff
        beq done

        ; call blur
        ; first get process ID, so we can get the RAM Bank to call blur()
        clc
        rol ; * 16
        rol
        rol
        rol
        tax

        lda window_data + window_processid_offset, x

        jsr bench_process:get_bank
        sta RAM_BANK

        jsr bench_general:application_blur

        lda #bench_general:bank_bench
        sta RAM_BANK

        ; updated blurred window
        lda current_window

        clc
        jsr draw_window

    .done:
        rts

    .endproc

    ; focus's for the window in A
    ; ** CHANGES RAM BANK **
    ; Inputs:
    ; A: Window ID
    .proc focus_window

        sta current_window

        clc
        rol ; * 16
        rol
        rol
        rol
        tax

        lda window_data + window_processid_offset, x

        jsr bench_process:get_bank
        sta RAM_BANK

        jsr bench_general:application_focus

        lda #bench_general:bank_bench
        sta RAM_BANK
        lda current_window

        sec
        jsr draw_window

        rts

    .endproc

    ; ** Can be called by applications **
    ; Updates the contents in VRAM for a window
    ; uses contents_* locations in ZP
    .proc update_window_contents

        lda RAM_BANK
        pha

        lda #bench_general:bank_bench
        sta RAM_BANK

        stz CTRL    

        lda content_window_id
        clc
        rol ; * 16
        rol
        rol
        rol
        tax     

        lda window_data + window_width_offset, x
        phx

        dec                             ; adjust for border
        dec
        sta bench_general:factor1
        lda content_top
        sta bench_general:factor2

        jsr bench_general:multiply      ; top * width

        clc

        lda bench_general:factor1       ; + left
        adc content_left
        sta bench_general:factor1
        lda bench_general:factor2
        adc #0
        sta bench_general:factor2

        clc                             ; * 2
        rol bench_general:factor1
        rol bench_general:factor2

        clc

        plx
        ; set DATA0 to offset of start position within the VRAM array for this window
        lda window_data + window_vram_addr_offset, x
        adc bench_general:factor1
        sta ADDRx_L
        lda window_data + window_vram_addr_offset + 1, x
        adc bench_general:factor2
        sta ADDRx_M
        lda window_data + window_vram_addr_offset + 2, x
        adc #0
        sta ADDRx_H

        ldx content_source_length
        ldy content_source_length + 1
        iny

        pla
        sta RAM_BANK

    .loop:
        lda (content_source_address)
        sta DATA0

        inc content_source_address
        bne no_overflow
        inc content_source_address + 1

    .no_overflow:

        dex
        bne -loop
        dey
        bne -loop

        rts

    .endproc

    ; ** Can be called by applications **
    ; Draw window after changes
    ; Input :
    ; A : Window ID
    .proc update_display_window

        .const top = bench_general:zp_pointer+1
        .const left = bench_general:zp_pointer
        .const width = bench_general:zp_pointer2
        .const height = bench_general:zp_pointer2+1
    
        sta drawing_window
        tax

        lda #$09
        sta DC_BORDER

        lda RAM_BANK
        pha

        lda #bench_general:bank_bench
        sta RAM_BANK
        
        cpx current_window
        bne redraw_part
        lda drawing_window
        sec                 ; top window
        jsr draw_window     ; if we're drawing the current window, we know its got focus

        pla
        sta RAM_BANK

        stz DC_BORDER

        rts

    .redraw_part:

        ; itterate through the map looking for visible pixels, otherwise dont write
        ; dont update the border

        txa

        clc
        rol ;* 16
        rol
        rol
        rol

        tax

        ; get window dimensions without the border
        lda window_data + window_top_offset, x   
        inc
        sta top
        lda window_data + window_left_offset, x
        inc
        sta left
        lda window_data + window_width_offset, x
        dec
        dec
        sta width
        lda window_data + window_height_offset, x
        dec
        dec
        sta height

        ; get the window vram offset and add 1+width to get to the first tile of the display
        lda #01
        sta CTRL

        clc
        lda window_data + window_vram_addr_offset, x
        sta ADDRx_L
        lda window_data + window_vram_addr_offset + 1, x
        sta ADDRx_M
        lda window_data + window_vram_addr_offset + 2, x
        sta ADDRx_H
        stz CTRL

        lda #bench_general:bank_windowmap
        sta RAM_BANK

        ; setup VRAM banks
        ; copy from DATA1 -> DATA0
        ; DATA1 is the window data set above
        ; DATA0 is the display

        ; Set data0 to the first pixel

        ; starting position
        stz CTRL
        lda left
        clc
        rol
        sta ADDRx_L

        lda #$10
        sta ADDRx_H

        lda top
        sta ADDRx_M

        ; use top\left parameters as a pointer, need to div/2 to get to single byte steps
        clc
        rol left
        clc
        ror
        ror left

        clc
        adc #$a0
        sta top
        ; left, top should now point to the location in the window map

        ;pla             ; get window id
        ;pha 

        ldx height
        ldy #0
    .loop:
        lda drawing_window
        cmp (bench_general:zp_pointer), y       ; compare window ID in the map to ours
        bne not_this_window

    .this_window:
        ; copy the tile over
        lda DATA1
        sta DATA0
        lda DATA1
        sta DATA0

        jmp +done
    .not_this_window:
        lda DATA1
        lda DATA0
        lda DATA1
        lda DATA0

    .done:
        iny
        cpy width
        bne -loop

        dex
        beq +done

        clc
        lda left
        adc #$80
        sta left
        lda top
        adc #0
        sta top

        ldy #0

        ; adjust DATA0 address by one line
        lda left
        clc
        rol
        sta ADDRx_L

        lda ADDRx_M
        inc
        sta ADDRx_M

        jmp -loop

    .done:    

        pla
        sta RAM_BANK

        stz DC_BORDER

        rts

    .endproc

    .endscope
}

public static void OutputWindowTopLine()
{
    lda window_data + window_width_offset, x
    tay
    dey     ; we look for 0 one ahead to draw the corner

    OutputCharacter(0x55, "window_bordercolour");
    OutputCharacter(0x40, "window_bordercolour");
    OutputCharacter(0x73, "window_bordercolour");

    lda window_data + window_title_offset, x
    sta bench_general:zp_pointer
    lda window_data + window_title_offset + 1, x
    sta bench_general:zp_pointer + 1
    
    lda RAM_BANK
    pha
    lda window_data + window_title_bank_offset, x
    sta RAM_BANK

.loop:
    lda (bench_general:zp_pointer)
    beq +done
    OutputCharacterA("window_textcolour");
    inc bench_general:zp_pointer

    jmp -loop

.done:
    pla
    sta RAM_BANK

    OutputCharacter(0x6b, "window_bordercolour");

.loop:
    OutputCharacter(0x40, "window_bordercolour");
    bne -loop

    OutputCharacter(0x49, "window_bordercolour");
}

public static void OutputWindowLine()
{
    lda window_data + window_width_offset, x
    tay
    dey

    OutputCharacter(0x42, "window_bordercolour");

.loop:
    lda DATA1
    sta DATA0
    lda DATA1
    sta DATA0
    dey
    bne -loop

    OutputCharacter(0x42, "window_bordercolour");
}

public static void OutputWindowBottomLine()
{
    lda window_data + window_width_offset, x
    tay
    dey

    OutputCharacter(0x4a, "window_bordercolour");
    
.loop:
    OutputCharacter(0x40, "window_bordercolour");
    bne -loop

    OutputCharacter(0x4b, "window_bordercolour");
}

public static void OutputCharacter(byte tile, string colour)
{
    lda #@(tile)
    sta DATA0
    lda @(colour)
    sta DATA0
    dey
}

public static void OutputCharacterA( string colour)
{
    sta DATA0
    lda @(colour)
    sta DATA0
    dey
}

public override void Initialise()
{
    Init.Add(Proc);
    Setup();
}

