library BitBench.Window.Manager;

import Init="initialisation.bmasm";

private static byte BorderColour = 0xa9;
private static byte InactiveBorderColour = 0xa7;
private static byte WindowText = 0x0f;

private static void Setup()
{
    ; VRAM Map
    ; Tilemap starts at $00000
    ; Tilemap           $00000 - $03c00
    ; Application vram  $03c00 - $13000
    ; todo: move sprites to a more suitable location

    .segment bench_window, scope=bench_window

    .constvar byte window_width = $02
    .constvar byte window_height = $03
    .constvar byte window_left = $04
    .constvar byte window_top = $05
    .constvar ushort window_title = $06
    
    .constvar byte window_bordercolour = $02

    .const SCREEN_MODE = $ff5f
    .const MOUSE_CONFIG = $ff68
    
    .const border_colour = @(BorderColour)
    .const inactive_border_colour = @(InactiveBorderColour)
    .const window_text = @(WindowText)

    .const window_width_offset = 0
    .const window_height_offset = 1
    .const window_top_offset = 2
    .const window_left_offset = 3
    .const window_title_offset = 4
    .const window_zorder_offset = 6
    .const window_processid_offset = 7
    .const window_vram_addr_offset = 8
    .const window_vram_len_offset = 11
    .const window_padding1_offset = 13
    .const window_padding2_offset = 14
    .const window_padding3_offset = 15

    .const max_windows = 16

    .window_data:
    for(var i = 0; i < 16; i++)
    {
        .padvar byte width_@(i)
        .padvar byte height_@(i)
        .padvar byte top_@(i)
        .padvar byte left_@(i)
        .padvar ushort title_@(i)
        .padvar byte zorder_@(i)
        .padvar byte process_id_@(i)
        .padvar ushort vram_addr_@(i)
        .padvar byte vram_addrh_@(i)
        .padvar ushort vram_addr_@(i)
        .padvar byte padding1_@(i)
        .padvar byte padding2_@(i)
        .padvar byte padding3_@(i)
    }
    
    .padvar byte vram_addr_l
    .padvar byte vram_addr_m
    .padvar byte vram_addr_h

    .endsegment
}

private static void Proc()
{
    .scope bench_window

    .const screensize = 960

    .proc initialise

        ; setup display

        ; disable layer 0
        stz CTRL
        lda DC_VIDEO
        and #0b11101111
        sta DC_VIDEO

        lda #$68     ; 128x64 1bpp 256C
        sta L1_CONFIG

        stz L1_MAPBASE  ; set mapbase to 0

        ; clear vram from start of layer 1
        stz ADDRx_L
        stz ADDRx_M
        lda #$10
        sta ADDRx_H

        ; write to data0 128*60*2/16=960 times.
        ldx #<screensize
        ldy #(>screensize)+1
    .loop:

        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0
        stz DATA0

        dex
        bne -loop
        dey
        beq done
        ldx #$ff
        jmp -loop

    .done:
        ; enable the mouse
        sec
        jsr SCREEN_MODE
        lda #1              ; mouse visible
        jsr MOUSE_CONFIG

        ; clear memory, only need to clear process id
        ldx #0
        ldy #max_windows
    .loop:
        stz window_data + window_processid_offset, x
        
        clc
        txa
        adc #16
        tax

        dey
        bne -loop

        ; set base of application vram
        stz vram_addr_l
        lda #$3c
        sta vram_addr_m
        lda #$10            ; add stepping here, as it will always be by one.
        sta vram_addr_h 

        ; clear window map bank
        lda RAM_BANK
        pha

        lda #bench_general:bank_windowmap
        sta RAM_BANK

        lda #$a0
        stz bench_general:zp_pointer
        sta bench_general:zp_pointer + 1

        ldx #$20
        ldy #0
        lda #$ff

    .loop:
        sta (bench_general:zp_pointer), y
        dey
        bne -loop
        inc bench_general:zp_pointer + 1
        dex
        bne -loop

        pla
        sta RAM_BANK

        rts

    .endproc

    ; ** can be called by applications **
    ; creates a window and sets it to the lowest Z Order so it is displayed
    ; parameters are passed via the ZP values
    ; byte window_width
    ; byte window_height
    ; byte window_top
    ; byte window_left
    ; ushort window_title, pointer to null terminated string.
    ; also uses these registers
    ; A: process ID
    ; returns
    ; A: window ID
    ; carry set on error, eg too many windows or out of memory
    .proc create_window
        ; loop through the window list looking for a empty slot.
        ; adjust zorder by one as we go

        pha

        ldx RAM_BANK
        stx bench_general:return_rambank

        ldx #bench_general:bank_bench
        stx RAM_BANK

        ldy #0
        ldx #0

    .loop:
        lda window_data + window_processid_offset, x
        beq found_position

        iny
        cpy #max_windows + 1
        beq error_no_space

        clc
        txa
        adc #16
        tax

        lda window_data + window_processid_offset, x
        bne -loop       ; only inc windows with a process id
        inc window_data + window_zorder_offset, x

        jmp -loop

    .error_no_space:
        lda bench_general:return_rambank
        sta RAM_BANK

        pla
        sec        
        rts

    .found_position:
        pla
        phy
        ; y now has the window ID, X the offset
        sta window_data + window_processid_offset, x   

        lda window_width
        sta window_data + window_width_offset, x
        dec
        dec
        sta bench_general:factor1     ; used to muliply later

        lda window_height
        sta window_data + window_height_offset, x
        dec
        dec
        clc
        rol ; * 2 as its tile+colour data
        sta bench_general:factor2

        lda window_top
        sta window_data + window_top_offset, x   

        lda window_left
        sta window_data + window_left_offset, x

        stz window_data + window_zorder_offset, x

        lda window_title
        sta window_data + window_title_offset, x   
        lda window_title + 1
        sta window_data + window_title_offset + 1, x   

        phx

    .loop:
        cpy #max_windows + 1
        beq +done
        
        iny
        clc
        txa
        adc #16
        tax

        lda window_data + window_processid_offset, x
        beq -loop       ; only inc windows with a process id
        inc window_data + window_zorder_offset, x

        jmp -loop

    .done:
        ; allocate VRAM
        ; multiply height-2 * width-2 * 2
        lda #0
        ldx #8
        lsr bench_general:factor1
    .loop:
        bcc no_add
        clc
        adc bench_general:factor2
    .no_add:
        ror
        ror bench_general:factor1
        dex
        bne -loop
        sta bench_general:factor2

        plx

        ; factor1/2 should now have the total size
        ; store length
        lda bench_general:factor1
        sta window_data + window_vram_len_offset, x
        lda bench_general:factor2
        sta window_data + window_vram_len_offset + 1, x

        ; set data port before we overwrite the pointer
        stz CTRL
        lda vram_addr_l
        sta ADDRx_L
        lda vram_addr_m
        sta ADDRx_M
        lda vram_addr_h
        sta ADDRx_H

        ; store vram position and add length
        clc
        lda vram_addr_l
        sta window_data + window_vram_addr_offset, x
        adc bench_general:factor1
        sta vram_addr_l

        lda vram_addr_m
        sta window_data + window_vram_addr_offset + 1, x
        adc bench_general:factor2
        sta vram_addr_m

        lda vram_addr_h
        sta window_data + window_vram_addr_offset + 2, x
        adc #0
        sta vram_addr_h

        ; clear the vram
        lda bench_general:factor1
        ldx bench_general:factor2
        inx

        ; must be a quicker way to do this!
    .loop:
        stz DATA0
        dec
        bne -loop
        dex
        beq +done
        jmp -loop
        
    .done:
        ; write in window map
        lda #bench_general:bank_windowmap
        sta RAM_BANK
 
        ; use top\left parameters as a pointer
        lda window_top

        clc
        rol window_left
        clc
        ror
        ror window_left

        clc
        adc #$a0
        sta window_top
        ; left, top should now point to the location in the window map

        pla             ; get window id
        pha 

        ; loop through and set all entries in the map to the window id. add 128 each line.
        ldx window_height
        ldy window_width
    .loop:
        dey
        sta (window_left), y
        bne -loop

        dex
        beq +done

        pha
        clc
        lda window_left
        adc #$80
        sta window_left
        lda window_top
        adc #0
        sta window_top    
        pla

        ldy window_width
        iny
    
        jmp -loop

    .done:

        lda bench_general:return_rambank
        sta RAM_BANK

        pla
        clc
        rts

    .endproc

    ; ** can be called by applications **
    ; marks a window as closed, doesn't perform any checks
    ; inputs:
    ; A: window ID
    .proc close_window

        ldx RAM_BANK
        stx bench_general:return_rambank

        ldx #bench_general:bank_bench
        stx RAM_BANK

        clc

        rol ; * 16
        rol
        rol
        rol

        tax

        stz window_data + window_processid_offset, x

        lda bench_general:return_rambank
        sta RAM_BANK

        rts

    .endproc

    ; draw window, will stomp on the current display
    ; assumes bank 1 is active
    ; inputs
    ; A window ID,
    ; Carry - if set its the top window
    .proc draw_window
        pha

        bcc not_top

        lda #border_colour
        jmp draw_start
    .not_top:
        lda #inactive_border_colour
        
    .draw_start:
        sta window_bordercolour

        clc
        pla

        rol ; * 16
        rol
        rol
        rol

        tax

        ; display source
        lda #01
        sta CTRL
        lda window_data + window_vram_addr_offset, x
        sta ADDRx_L
        lda window_data + window_vram_addr_offset + 1, x
        sta ADDRx_M
        lda window_data + window_vram_addr_offset + 2, x
        sta ADDRx_H
    
        ; starting position
        stz CTRL
        lda window_data + window_left_offset, x
        clc
        rol
        sta ADDRx_L

        lda window_data + window_top_offset, x
        sta ADDRx_M

        lda #$10
        sta ADDRx_H        

        OutputWindowTopLine();

        ; central lines
        lda window_data + window_height_offset, x
        dec
        dec
        tay
    .line_loop:
        phy

        lda window_data + window_left_offset, x
        clc
        rol
        sta ADDRx_L
        inc ADDRx_M

        OutputWindowLine();

        ply
        dey
        bne -line_loop

        ; bottom line
        lda window_data + window_left_offset, x
        clc
        rol
        sta ADDRx_L
        inc ADDRx_M

        OutputWindowBottomLine();

        rts

    .endproc

    .endscope
}

public static void OutputWindowTopLine()
{
    lda window_data + window_width_offset, x
    tay
    dey     ; we look for 0 one ahead to draw the corner

    OutputCharacter(0x55, "window_bordercolour");
    OutputCharacter(0x40, "window_bordercolour");
    OutputCharacter(0x73, "window_bordercolour");

    lda window_data + window_title_offset, x
    sta bench_general:zp_pointer
    lda window_data + window_title_offset + 1, x
    sta bench_general:zp_pointer + 1
    
.loop:
    lda (bench_general:zp_pointer)
    beq +done
    OutputCharacterA("#window_text");
    inc bench_general:zp_pointer

    jmp -loop

.done:
    OutputCharacter(0x6b, "window_bordercolour");

.loop:
    OutputCharacter(0x40, "window_bordercolour");
    bne -loop

    OutputCharacter(0x49, "window_bordercolour");
}

public static void OutputWindowLine()
{
    lda window_data + window_width_offset, x
    tay
    dey

    OutputCharacter(0x42, "window_bordercolour");

.loop:
    lda DATA1
    sta DATA0
    lda DATA1
    sta DATA0
    dey
    bne -loop

    OutputCharacter(0x42, "window_bordercolour");
}

public static void OutputWindowBottomLine()
{
    lda window_data + window_width_offset, x
    tay
    dey

    OutputCharacter(0x4a, "window_bordercolour");
    
.loop:
    OutputCharacter(0x40, "window_bordercolour");
    bne -loop

    OutputCharacter(0x4b, "window_bordercolour");
}

public static void OutputCharacter(byte tile, string colour)
{
    lda #@(tile)
    sta DATA0
    lda @(colour)
    sta DATA0
    dey
}

public static void OutputCharacterA( string colour)
{
    sta DATA0
    lda @(colour)
    sta DATA0
    dey
}

public override void Initialise()
{
    Init.Add(Proc);
    Setup();
}

