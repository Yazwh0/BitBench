library BitBench.Scheduler.Manager;

import Init="initialisation.bmasm";
 
private static void Setup()
{
    
/*
//    Scheduler needs:
//    byte: Counter till wake
//    byte: Count Required
//    byte: Main Bank
//    byte: Hold
*/

    .segment bench_scheduler
    .scope bitbench_scheduler

    .const WakeCount = 0
    .const Required = 1
    .const Bank = 2
    .const Hold = 3

    .const max_processes = 16       ; all data structures are currently for 64 processes

    .scheduler_data:
    for(var i = 0; i < 256/4; i++)
    {
        .padvar byte wakecount_@(i)
        .padvar byte required_@(i)
        .padvar byte mainbank_@(i)
        .padvar byte hold_@(i)
    }

    .endscope
    .endsegment

    .segment bench_general
    .scope bitbench_scheduler

    .padvar byte state              ; if we're looking for 'realtime' processes or not
    .padvar byte current_process

    .padvar byte process_index
    .padvar byte process_count

    .padvar byte realtime_index
    .padvar byte realtime_count

    .endscope
    .endsegment
}

private static void Proc()
{
    .scope bitbench_scheduler

    .proc initialise
 
        lda #$ff
        ldx #0
        .loop:
        stz scheduler_data + WakeCount, x
        stz scheduler_data + Required, x
        stz scheduler_data + Bank, x
        sta scheduler_data + Hold, x            ; set all processes on hold
        inx
        inx
        inx
        inx
        bne loop

        stz state
        stz current_process

        lda #1
        sta realtime_index
        sta process_index

        lda #$0f
        sta realtime_count
        sta process_count

        ; ; test
        ; lda #1
        ; sta required_2
        ; stz wakecount_2
        ; stz hold_2

        rts

    .endproc

    ; set a process to run
    ; Input
    ; A: Process ID,
    ; Y: Required count
    .proc enable_process
                        
        rol
        rol
        tax
        stz scheduler_data + Hold, x                ; clear the hold flag

        tya
        sta scheduler_data + Required, x

        lda #1                                      ; always wake next
        sta scheduler_data + WakeCount, x

        rts

    .endproc

    ; Get the next process to activate
    ; Needs to have Ram bank for BitBench set.
    ; Output
    ; A: process ID, if zero then nothing to do
    ; Z: If A is zero.
    ; Will search for 'realtime' processes first
    .proc get_next_process

        ldx state
        bne non_priority
        
        lda realtime_index                          ; need to invert to get countdown, this doesn't get reset each frame
        and #$0f
        ldy realtime_count                          ; counter to ensure we only do 16 checks per frame

        clc
        rol                                         ; convert A to index into scheduler
        rol
        tax
        .loop:
        lda scheduler_data + Hold, x                ; is the process on hold?
        bne +end_loop
        lda scheduler_data + Required, x            ; if zero then 'realtime'
        beq +found

        .end_loop:
        inx                                         ; next index
        inx
        inx
        inx
        txa
        and #$3f
        tax

        dey                                         ; any more?
        bne -loop
        jmp not_found                               ; look for a normal process

        .found:
        txa
        clc
        ror
        ror
        sta current_process            
        inc
        sta realtime_index                          ; keep the index for next time
        iny
        sty realtime_count

        rts

        .not_found:
        ;txa                                        ; if its not found then the index won't change
        ;clc
        ;ror
        ;ror
        ;sta realtime_index                         ; keep the index for next time
 
        lda #1
        sta state

        .non_priority:

        lda process_index                           ; get index
        and #$0f
        ldy process_count

        clc
        rol
        rol
        tax
        .loop:
        lda scheduler_data + Hold, x             ; is the process on hold?
        bne +end_loop

        dec scheduler_data + WakeCount, x        ; dec its wait count, if zero its the next process
        beq +found

        .end_loop:
        inx
        inx
        inx
        inx
        txa
        and #$3f
        tax

        dey                                      ; any more?
        bne -loop
        jmp no_process

        .found:
        dey
        sty process_count                       ; dec so we start from next process next time
        clc
        txa
        ror
        ror
        sta current_process
        inc
        sta process_index                       ; inc so we start from the next process next time
        
        lda scheduler_data + Required, x         ; reset counter
        sta scheduler_data + WakeCount, x

        lda current_process

        rts
        .no_process:

        stz process_index
        lda #0                                   ; indicate there is nothing to do
        rts

    .endproc

    ; reset the lookup priority
    .proc reset

        stz state

        lda #$0f
        sta realtime_count
        sta process_count

        rts

    .endproc

    .endscope
}

public override void Initialise()
{
    Init.Add(Proc);
    Setup();
}

